const canvas = document.getElementById("glcanvas");
const gl = canvas.getContext("webgl");

if (!gl) {
    alert("WebGL not supported!");
}

const vertices = new Float32Array([
0.00,-1.00,0.00,0.26,-0.97,0.00,0.50,-0.87,0.00,0.71,-0.71,0.00,0.87,-0.50,0.00,0.97,-0.26,0.00,1.00,0.00,0.00,0.97,0.26,0.00,0.87,0.50,0.00,0.71,0.71,0.00,0.50,0.87,0.00,0.26,0.97,0.00,0.00,1.00,0.00,0.00,-1.00,0.00,0.25,-0.97,0.07,0.48,-0.87,0.13,0.68,-0.71,0.18,0.84,-0.50,0.22,0.93,-0.26,0.25,0.97,0.00,0.26,0.93,0.26,0.25,0.84,0.50,0.22,0.68,0.71,0.18,0.48,0.87,0.13,0.25,0.97,0.07,0.00,1.00,0.00,0.00,-1.00,0.00,0.22,-0.97,0.13,0.43,-0.87,0.25,0.61,-0.71,0.35,0.75,-0.50,0.43,0.84,-0.26,0.48,0.87,0.00,0.50,0.84,0.26,0.48,0.75,0.50,0.43,0.61,0.71,0.35,0.43,0.87,0.25,0.22,0.97,0.13,0.00,1.00,0.00,0.00,-1.00,0.00,0.18,-0.97,0.18,0.35,-0.87,0.35,0.50,-0.71,0.50,0.61,-0.50,0.61,0.68,-0.26,0.68,0.71,0.00,0.71,0.68,0.26,0.68,0.61,0.50,0.61,0.50,0.71,0.50,0.35,0.87,0.35,0.18,0.97,0.18,0.00,1.00,0.00,0.00,-1.00,0.00,0.13,-0.97,0.22,0.25,-0.87,0.43,0.35,-0.71,0.61,0.43,-0.50,0.75,0.48,-0.26,0.84,0.50,0.00,0.87,0.48,0.26,0.84,0.43,0.50,0.75,0.35,0.71,0.61,0.25,0.87,0.43,0.13,0.97,0.22,0.00,1.00,0.00,0.00,-1.00,0.00,0.07,-0.97,0.25,0.13,-0.87,0.48,0.18,-0.71,0.68,0.22,-0.50,0.84,0.25,-0.26,0.93,0.26,0.00,0.97,0.25,0.26,0.93,0.22,0.50,0.84,0.18,0.71,0.68,0.13,0.87,0.48,0.07,0.97,0.25,0.00,1.00,0.00,0.00,-1.00,0.00,0.00,-0.97,0.26,0.00,-0.87,0.50,0.00,-0.71,0.71,0.00,-0.50,0.87,0.00,-0.26,0.97,0.00,0.00,1.00,0.00,0.26,0.97,0.00,0.50,0.87,0.00,0.71,0.71,0.00,0.87,0.50,0.00,0.97,0.26,0.00,1.00,0.00,-0.00,-1.00,0.00,-0.07,-0.97,0.25,-0.13,-0.87,0.48,-0.18,-0.71,0.68,-0.22,-0.50,0.84,-0.25,-0.26,0.93,-0.26,0.00,0.97,-0.25,0.26,0.93,-0.22,0.50,0.84,-0.18,0.71,0.68,-0.13,0.87,0.48,-0.07,0.97,0.25,-0.00,1.00,0.00,-0.00,-1.00,0.00,-0.13,-0.97,0.22,-0.25,-0.87,0.43,-0.35,-0.71,0.61,-0.43,-0.50,0.75,-0.48,-0.26,0.84,-0.50,0.00,0.87,-0.48,0.26,0.84,-0.43,0.50,0.75,-0.35,0.71,0.61,-0.25,0.87,0.43,-0.13,0.97,0.22,-0.00,1.00,0.00,-0.00,-1.00,0.00,-0.18,-0.97,0.18,-0.35,-0.87,0.35,-0.50,-0.71,0.50,-0.61,-0.50,0.61,-0.68,-0.26,0.68,-0.71,0.00,0.71,-0.68,0.26,0.68,-0.61,0.50,0.61,-0.50,0.71,0.50,-0.35,0.87,0.35,-0.18,0.97,0.18,-0.00,1.00,0.00,-0.00,-1.00,0.00,-0.22,-0.97,0.13,-0.43,-0.87,0.25,-0.61,-0.71,0.35,-0.75,-0.50,0.43,-0.84,-0.26,0.48,-0.87,0.00,0.50,-0.84,0.26,0.48,-0.75,0.50,0.43,-0.61,0.71,0.35,-0.43,0.87,0.25,-0.22,0.97,0.13,-0.00,1.00,0.00,-0.00,-1.00,0.00,-0.25,-0.97,0.07,-0.48,-0.87,0.13,-0.68,-0.71,0.18,-0.84,-0.50,0.22,-0.93,-0.26,0.25,-0.97,0.00,0.26,-0.93,0.26,0.25,-0.84,0.50,0.22,-0.68,0.71,0.18,-0.48,0.87,0.13,-0.25,0.97,0.07,-0.00,1.00,0.00,-0.00,-1.00,0.00,-0.26,-0.97,0.00,-0.50,-0.87,0.00,-0.71,-0.71,0.00,-0.87,-0.50,0.00,-0.97,-0.26,0.00,-1.00,0.00,0.00,-0.97,0.26,0.00,-0.87,0.50,0.00,-0.71,0.71,0.00,-0.50,0.87,0.00,-0.26,0.97,0.00,-0.00,1.00,0.00,-0.00,-1.00,-0.00,-0.25,-0.97,-0.07,-0.48,-0.87,-0.13,-0.68,-0.71,-0.18,-0.84,-0.50,-0.22,-0.93,-0.26,-0.25,-0.97,0.00,-0.26,-0.93,0.26,-0.25,-0.84,0.50,-0.22,-0.68,0.71,-0.18,-0.48,0.87,-0.13,-0.25,0.97,-0.07,-0.00,1.00,-0.00,-0.00,-1.00,-0.00,-0.22,-0.97,-0.13,-0.43,-0.87,-0.25,-0.61,-0.71,-0.35,-0.75,-0.50,-0.43,-0.84,-0.26,-0.48,-0.87,0.00,-0.50,-0.84,0.26,-0.48,-0.75,0.50,-0.43,-0.61,0.71,-0.35,-0.43,0.87,-0.25,-0.22,0.97,-0.13,-0.00,1.00,-0.00,-0.00,-1.00,-0.00,-0.18,-0.97,-0.18,-0.35,-0.87,-0.35,-0.50,-0.71,-0.50,-0.61,-0.50,-0.61,-0.68,-0.26,-0.68,-0.71,0.00,-0.71,-0.68,0.26,-0.68,-0.61,0.50,-0.61,-0.50,0.71,-0.50,-0.35,0.87,-0.35,-0.18,0.97,-0.18,-0.00,1.00,-0.00,-0.00,-1.00,-0.00,-0.13,-0.97,-0.22,-0.25,-0.87,-0.43,-0.35,-0.71,-0.61,-0.43,-0.50,-0.75,-0.48,-0.26,-0.84,-0.50,0.00,-0.87,-0.48,0.26,-0.84,-0.43,0.50,-0.75,-0.35,0.71,-0.61,-0.25,0.87,-0.43,-0.13,0.97,-0.22,-0.00,1.00,-0.00,-0.00,-1.00,-0.00,-0.07,-0.97,-0.25,-0.13,-0.87,-0.48,-0.18,-0.71,-0.68,-0.22,-0.50,-0.84,-0.25,-0.26,-0.93,-0.26,0.00,-0.97,-0.25,0.26,-0.93,-0.22,0.50,-0.84,-0.18,0.71,-0.68,-0.13,0.87,-0.48,-0.07,0.97,-0.25,-0.00,1.00,-0.00,-0.00,-1.00,-0.00,-0.00,-0.97,-0.26,-0.00,-0.87,-0.50,-0.00,-0.71,-0.71,-0.00,-0.50,-0.87,-0.00,-0.26,-0.97,-0.00,0.00,-1.00,-0.00,0.26,-0.97,-0.00,0.50,-0.87,-0.00,0.71,-0.71,-0.00,0.87,-0.50,-0.00,0.97,-0.26,-0.00,1.00,-0.00,0.00,-1.00,-0.00,0.07,-0.97,-0.25,0.13,-0.87,-0.48,0.18,-0.71,-0.68,0.22,-0.50,-0.84,0.25,-0.26,-0.93,0.26,0.00,-0.97,0.25,0.26,-0.93,0.22,0.50,-0.84,0.18,0.71,-0.68,0.13,0.87,-0.48,0.07,0.97,-0.25,0.00,1.00,-0.00,0.00,-1.00,-0.00,0.13,-0.97,-0.22,0.25,-0.87,-0.43,0.35,-0.71,-0.61,0.43,-0.50,-0.75,0.48,-0.26,-0.84,0.50,0.00,-0.87,0.48,0.26,-0.84,0.43,0.50,-0.75,0.35,0.71,-0.61,0.25,0.87,-0.43,0.13,0.97,-0.22,0.00,1.00,-0.00,0.00,-1.00,-0.00,0.18,-0.97,-0.18,0.35,-0.87,-0.35,0.50,-0.71,-0.50,0.61,-0.50,-0.61,0.68,-0.26,-0.68,0.71,0.00,-0.71,0.68,0.26,-0.68,0.61,0.50,-0.61,0.50,0.71,-0.50,0.35,0.87,-0.35,0.18,0.97,-0.18,0.00,1.00,-0.00,0.00,-1.00,-0.00,0.22,-0.97,-0.13,0.43,-0.87,-0.25,0.61,-0.71,-0.35,0.75,-0.50,-0.43,0.84,-0.26,-0.48,0.87,0.00,-0.50,0.84,0.26,-0.48,0.75,0.50,-0.43,0.61,0.71,-0.35,0.43,0.87,-0.25,0.22,0.97,-0.13,0.00,1.00,-0.00,0.00,-1.00,-0.00,0.25,-0.97,-0.07,0.48,-0.87,-0.13,0.68,-0.71,-0.18,0.84,-0.50,-0.22,0.93,-0.26,-0.25,0.97,0.00,-0.26,0.93,0.26,-0.25,0.84,0.50,-0.22,0.68,0.71,-0.18,0.48,0.87,-0.13,0.25,0.97,-0.07,0.00,1.00,-0.00,0.00,-1.00,-0.00,0.26,-0.97,-0.00,0.50,-0.87,-0.00,0.71,-0.71,-0.00,0.87,-0.50,-0.00,0.97,-0.26,-0.00,1.00,0.00,-0.00,0.97,0.26,-0.00,0.87,0.50,-0.00,0.71,0.71,-0.00,0.50,0.87,-0.00,0.26,0.97,-0.00,0.00,1.00,-0.00
]);

const indices = new Uint16Array([
 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,221,222,222,223,223,224,224,225,225,226,226,227,227,228,228,229,229,230,230,231,231,232,232,233,234,235,235,236,236,237,237,238,238,239,239,240,240,241,241,242,242,243,243,244,244,245,245,246,247,248,248,249,249,250,250,251,251,252,252,253,253,254,254,255,255,256,256,257,257,258,258,259,260,261,261,262,262,263,263,264,264,265,265,266,266,267,267,268,268,269,269,270,270,271,271,272,273,274,274,275,275,276,276,277,277,278,278,279,279,280,280,281,281,282,282,283,283,284,284,285,286,287,287,288,288,289,289,290,290,291,291,292,292,293,293,294,294,295,295,296,296,297,297,298,299,300,300,301,301,302,302,303,303,304,304,305,305,306,306,307,307,308,308,309,309,310,310,311,312,313,313,314,314,315,315,316,316,317,317,318,318,319,319,320,320,321,321,322,322,323,323,324,0,13,13,26,26,39,39,52,52,65,65,78,78,91,91,104,104,117,117,130,130,143,143,156,156,169,169,182,182,195,195,208,208,221,221,234,234,247,247,260,260,273,273,286,286,299,299,312,1,14,14,27,27,40,40,53,53,66,66,79,79,92,92,105,105,118,118,131,131,144,144,157,157,170,170,183,183,196,196,209,209,222,222,235,235,248,248,261,261,274,274,287,287,300,300,313,2,15,15,28,28,41,41,54,54,67,67,80,80,93,93,106,106,119,119,132,132,145,145,158,158,171,171,184,184,197,197,210,210,223,223,236,236,249,249,262,262,275,275,288,288,301,301,314,3,16,16,29,29,42,42,55,55,68,68,81,81,94,94,107,107,120,120,133,133,146,146,159,159,172,172,185,185,198,198,211,211,224,224,237,237,250,250,263,263,276,276,289,289,302,302,315,4,17,17,30,30,43,43,56,56,69,69,82,82,95,95,108,108,121,121,134,134,147,147,160,160,173,173,186,186,199,199,212,212,225,225,238,238,251,251,264,264,277,277,290,290,303,303,316,5,18,18,31,31,44,44,57,57,70,70,83,83,96,96,109,109,122,122,135,135,148,148,161,161,174,174,187,187,200,200,213,213,226,226,239,239,252,252,265,265,278,278,291,291,304,304,317,6,19,19,32,32,45,45,58,58,71,71,84,84,97,97,110,110,123,123,136,136,149,149,162,162,175,175,188,188,201,201,214,214,227,227,240,240,253,253,266,266,279,279,292,292,305,305,318,7,20,20,33,33,46,46,59,59,72,72,85,85,98,98,111,111,124,124,137,137,150,150,163,163,176,176,189,189,202,202,215,215,228,228,241,241,254,254,267,267,280,280,293,293,306,306,319,8,21,21,34,34,47,47,60,60,73,73,86,86,99,99,112,112,125,125,138,138,151,151,164,164,177,177,190,190,203,203,216,216,229,229,242,242,255,255,268,268,281,281,294,294,307,307,320,9,22,22,35,35,48,48,61,61,74,74,87,87,100,100,113,113,126,126,139,139,152,152,165,165,178,178,191,191,204,204,217,217,230,230,243,243,256,256,269,269,282,282,295,295,308,308,321,10,23,23,36,36,49,49,62,62,75,75,88,88,101,101,114,114,127,127,140,140,153,153,166,166,179,179,192,192,205,205,218,218,231,231,244,244,257,257,270,270,283,283,296,296,309,309,322,11,24,24,37,37,50,50,63,63,76,76,89,89,102,102,115,115,128,128,141,141,154,154,167,167,180,180,193,193,206,206,219,219,232,232,245,245,258,258,271,271,284,284,297,297,310,310,323,12,25,25,38,38,51,51,64,64,77,77,90,90,103,103,116,116,129,129,142,142,155,155,168,168,181,181,194,194,207,207,220,220,233,233,246,246,259,259,272,272,285,285,298,298,311,311,324
]);

const vertexBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

const indexBuffer = gl.createBuffer();
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

const vertexShaderSource = `
    attribute vec3 position;
    uniform float angle;
    void main() {
        // first apply azimuth tilting
        float az_angle = 0.35;
        float azc = cos(az_angle);
        float azs = sin(az_angle);
        mat3 az_rotation = mat3(
            1, 0, 0,
            0, azc,-azs,
            0, azs, azc
        );
        // rotate along y axis (vertical)
        float c = cos(angle);
        float s = sin(angle);
        mat3 rotation = mat3(
            c, 0, s,
            0, 1, 0,
           -s, 0, c
        );
        gl_Position = vec4(az_rotation * rotation * position, 1.0);
    }
`;

const fragmentShaderSource = `
    void main() {
        gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);
    }
`;

function compileShader(source, type) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.error("Shader compile error:", gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);
        return null;
    }
    return shader;
}

const vertexShader = compileShader(vertexShaderSource, gl.VERTEX_SHADER);
const fragmentShader = compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);

const shaderProgram = gl.createProgram();
gl.attachShader(shaderProgram, vertexShader);
gl.attachShader(shaderProgram, fragmentShader);
gl.linkProgram(shaderProgram);

if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
    console.error("Shader program link error:", gl.getProgramInfoLog(shaderProgram));
}

gl.useProgram(shaderProgram);

const positionLocation = gl.getAttribLocation(shaderProgram, "position");
gl.enableVertexAttribArray(positionLocation);
gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);

const angleLocation = gl.getUniformLocation(shaderProgram, "angle");

function render(time) {
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.uniform1f(angleLocation, time * 0.0002);
    gl.drawElements(gl.LINES, indices.length, gl.UNSIGNED_SHORT, 0);
    requestAnimationFrame(render);
}

gl.clearColor(0, 0, 0, 1);
gl.enable(gl.DEPTH_TEST);
render(0);